# This is an sample file for configuring a client to use authentication through
# the CAS system.

<Perl>
	$Apache2::PerlSections::Save = 1;
	use CAS::Apache::Auth;
	
	# This section creates the globals for the CAS admin client. Copy and
	# modify this section for any
	# other locations that should use a different client
	
	# The default CAS client for this location
	
	# Change <clientname> to the name of the client and replace $n with the
	# appropriate client ID - these two lines can be repeated for as
	# many different clients are configured in this file
	$CAS::Client::clientname_id = $n;
	$CAS::Global::Auth::Clientname
		= CAS::Apache::Auth->new({CLIENT_ID => $CAS::Client::clientname_id});
	
</Perl>

# change /srv/www/CAS to the real location where the client lives if it is
# not under htdocs/
#Alias /Clientname/ /srv/www/Clientname/
#<Directory /srv/www/Clientname>
#	Options Indexes +Multiviews
#	AllowOverride All
#</Directory>


# This <Location> directive sets up the CAS server tree. The name of this
# location must also be set in the CAS_BASE_URI var for path parsing.
#  Copy and modify this section for any
# other locations that should use a different client
<Location /Clientname>
	# make the base URL and the ID for this client available to perl cgi's
	# and handlers in charge of this location (CAS_BASE_URI should be
	# the same as the current <Location>
	PerlSetVar CAS_BASE_URI '/Clientname'
	PerlSetVar CAS_WELCOME_PAGE '/Clientname/index.html'
	PerlSetVar CLIENT_ID $CAS::Client::clientname_id
	
	# If true this variable sets this location as an all or nothing permissions
	# tree. CAS authorization will only check the user against the permission
	# for this location (CAS_BASE_URI). Pages can still use authorization
	# directly for components, but any permissions in the database for
	# specific pages under this location WILL BE IGNORED by PerlAuthzHandler
	# PerlSetVar SinglePermissionTree 1
	
	# If true this variable instructs CAS to use only the first path portion
	# after CAS_BASE_URI in determining access autherization. This could be
	# useful for handlers or pages that parse the
	# remainder of the URL as arguments, or where the subdirectoires are all
	# assigned to individual users, who own everything therein
	# PerlSetVar OneStepOnly 1
	
	PerlOptions +GlobalRequest
	
	# This sets this location as a cgi directory, with CGI's handled by
	# mod_perl. To mix in cgi's, set a certain file extension to be handled
	# this way instead.
#	SetHandler perl-script
#	PerlHandler ModPerl::Registry
#	Options +ExecCGI
	
	# This section specifies that access to anything under this Location
	# needs to be authorized by CAS.
	AuthName CAS
	AuthType custom
	PerlAuthenHandler $CAS::Global::Auth::Clientname->authen
	PerlAuthzHandler $CAS::Global::Auth::Clientname->authz
	require valid-user
	
# This is only needed if you have code that sends a response, but not a header
#	PerlSendHeader On
	
</Location>

# The login, NewUser and authenticate handlers have to be outside of the
# restricted location(s) in order to be accessible. Our convention is to have
# a /public directory which CAS::Apache::Authorization allows access to even
# if under a protected base
<Location /Clientname/public>
	SetHandler perl-script
	PerlResponseHandler CAS::Apache::PublicForms
	PerlSetVar auth_object CAS::Global::Auth::Clientname
	Satisfy Any
	Allow from all
</Location>

# And there needs to be a section handled by UserForms for things like
# edit account, logout etc
<Location /Clientname/user>
	SetHandler perl-script
	PerlResponseHandler CAS::Apache::UserForms
</Location>
